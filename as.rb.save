$mnems = {
	"nop" => "000000",
	"set" => "000001",
	"cop" => "000010",
	"ldw" => "000011",
	"ldb" => "000100",
	"stw" => "000101",
	"stb" => "000110",
	"add" => "010000",
	"sub" => "010001",
	"mul" => "010010",
	"div" => "010011"

}

$regs = {
	"zero" => "00000",
	"g1" => "00001",
	"g2" => "00010",
	"g3" => "00011",
	"g4" => "00100",
	"g5" => "00101",
	"g6" => "00110",
	"g7" => "00111",
	"g8" => "01000",
	"sp" => "01001",
	"pc" => "01010"
}

$opfmt = {
	"nop" => [],
	"set" => [:reg, :val],
	"add" => [:reg, :reg, :reg],
	"sub" => [:reg, :reg, :reg]
}

def GetMnems(line)
	return line.split(/\W+/)
end

def to16(num)
	return num.to_s(2).rjust(16, "0")
end

def toBin(num)
	return num.to_i(2)
end

def assembleOp(mnem, a, b, c)
	if(mnem == "nop")
		return "00000000000000000000000000000000"
	elsif(mnem == "set")
		return $mnems["set"] + "00000" + $regs[a] + to16(b)
	elsif(mnem == "add")
		return $mnems["add"] + "00000000000" + $regs[a] + $regs[b] + $regs[c]
	elsif(mnem == "sub")
		return $mnems["sub"] + "00000000000" + $regs[a] + $regs[b] + $regs[c]
	elsif(mnem == "mul")
		return $mnems["mul"] + "00000000000" + $regs[a] + $regs[b] + $regs[c]
	elsif(mnem == "div")
		return $mnems["div"] + "00000000000" + $regs[a] + $regs[b] + $regs[c]
	end
end

prog = File.open("prog.bin", "w")

prog << [toBin(assembleOp("set", "g2", 6, nil))].pack("N")
prog << [toBin(assembleOp("set", "g3", 2, nil))].pack("N")
prog << [toBin(asse

prog.close()
